// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // if A-instruction wire A-register to instruction else output of ALU
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=inAreg);

    // if a-instruction or destination flag for A register load in A register
    Not(in=instruction[15],out=isAinstruction);
    Or(a=isAinstruction, b=instruction[5],out=loadAreg);

    // if not an A-instruction and destination flag to load in D register load in D register
    And(a=instruction[15],b=instruction[4],out=loadDreg);
    
    // A register
    ARegister(in=inAreg,load=loadAreg,out=outAreg);

    // if a-bit of c-instruction wire ALU to A else load to inM
    Mux16(a=outAreg,b=inM,sel=instruction[12],out=inALU);

    ALU(x=outDreg,y=inALU,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,zr=isoutALUzr,ng=isoutALUng);
    
    // outM
    And16(a=outALU,b=outALU, out=outM);

    // Dregister update
    DRegister(in=outALU,load=loadDreg,out=outDreg);
    
    // writeM
    And(a=instruction[15],b=instruction[3],out=writeM);

    // addressM
    And16(a=outAreg,b=outAreg,out[0..14]=addressM);

    // PC update
    And(a=instruction[15],b=instruction[1],out=JEQ); 
    And(a=JEQ,b=isoutALUzr,out=eqjmp);
    And(a=instruction[15],b=instruction[2],out=JL); 
    And(a=JL,b=isoutALUng,out=ngjmp);
    Or(a=isoutALUzr,b=isoutALUng,out=notPositiveALU);
    Not(in=notPositiveALU,out=isALUpositive);
    And(a=instruction[15],b=instruction[0],out=JG); 
    And(a=JG,b=isALUpositive,out=psjmp);

    Or8Way(in[0]=eqjmp,in[1]=ngjmp,in[2]=psjmp,in[3]=false,in[4]=false,in[5]=false,in[6]=false,in[7]=false, out=loadPC);

    PC(in=outAreg,load=loadPC, inc=true,reset=reset, out[0..14]=pc);
    
    
}
